EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
MUP DESIGN.bin -- emu8086 assembler version: 4.08  
 
[ 19-04-2020  --  23:04:57 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       #make_bin#
[   2]        :                                       
[   3]        :                                       #LOAD_SEGMENT=FFFFh#
[   4]        :                                       #LOAD_OFFSET=0000h#
[   5]        :                                       
[   6]        :                                       #CS=0000h#
[   7]        :                                       #IP=0000h#
[   8]        :                                       
[   9]        :                                       #DS=0000h#
[  10]        :                                       #ES=0000h#
[  11]        :                                       
[  12]        :                                       #SS=0000h#
[  13]        :                                       #SP=FFFEh#
[  14]        :                                       
[  15]        :                                       #AX=0000h#
[  16]        :                                       #BX=0000h#
[  17]        :                                       #CX=0000h#
[  18]        :                                       #DX=0000h#
[  19]        :                                       #SI=0000h#
[  20]        :                                       #DI=0000h#
[  21]        :                                       #BP=0000h#
[  22]        :                                       
[  23]        :                                       .model tiny
[  24]        :                                       
[  25]    0202: 06 03                                 .data
[  26]        :                                       org	00
[  27]        :                                       
[  28]        :                                       ; keypad lookup table
[  29]    0102: 00 02 75                              keypad_table	db	060h,050h,030h
[  30]        :                                       keypad_table_length	equ	3
[  31]        :                                       
[  32]        :                                       ; port addresses of 8255
[  33]        :                                       porta equ 10h
[  34]        :                                       portb equ 12h
[  35]        :                                       portc equ 14h
[  36]        :                                       ctrl_addr equ 16h
[  37]        :                                       io_mode equ 80h
[  38]        :                                       
[  39]        :                                       ;delay and keyboard variables
[  40]    0105: 02                                    keypressed	db	?
[  41]        :                                       delay20mscount	equ	1000h
[  42]        :                                       
[  43]        :                                       ; key ids
[  44]        :                                       keyid_dairy_milk	equ 	1
[  45]        :                                       keyid_five_star		equ		2
[  46]        :                                       keyid_perk			equ		3
[  47]        :                                       
[  48]        :                                       
[  49]        :                                       ; stack
[  50]    0106: EB 07 80 3E 03 00 03 75 00 E8 09 01   stack1		dw	100 dup(0)
                E8 FA 02 E8 64 01 80 3E CC 00 00 74 
                D1 E8 CF 01 80 3E CC 00 00 75 08 E8 
                49 00 E8 74 00 EB BF 80 3E D2 00 04 
                7D 05 E8 E7 02 EB 03 E8 B3 02 EB AE 
                B8 00 4C CD 21 9C 50 53 51 52 B0 98 
                E6 16 B0 03 E6 12 B0 08 E6 14 5A 59 
                5B 58 9D C3 9C 50 53 51 52 B0 98 E6 
                16 B0 02 E6 12 B0 08 E6 14 5A 59 5B 
                58 9D C3 9C 50 53 51 52 B0 98 E6 16 
                B0 00 E6 12 B0 08 E6 14 5A 59 5B 58 
                9D C3 9C 50 53 51 52 B0 98 E6 16 B0 
                01 E6 12 B0 08 E6 14 5A 59 5B 58 9D 
                C3 9C 50 53 51 52 B9 00 10 90 90 90 
                90 90 E2 F9 5A 59 5B 58 9D C3 9C 50 
                53 51 52 B0 98 E6 16 B0 70 E6 14 E4 
                14 24 70 3C 70 75 F8 E8             
[  51]    01CE:                                       top_stack1	label	word
[  52]        :                                       
[  53]        :                                       ;pressure sensor variables
[  54]    01CE: D3                                    is_valid db ?
[  55]    01CF: FF                                    no_of_coins db ?
[  56]        :                                       pressure_offset equ 13
[  57]        :                                       pressure_limit equ 14
[  58]        :                                       pressure_limit_plus_offset equ 28   ;max coins=14,offset=13,+1(in-valid input from 15 coins onwards)
[  59]        :                                       
[  60]        :                                       ;state variables
[  61]    01D0: B0                                    state_porta db ?
[  62]    01D1: 70                                    state_portb db ?
[  63]    01D2: E6                                    state_portc db ?
[  64]    01D3: 14                                    state_control_register db ?
[  65]        :                                       
[  66]        :                                       ;validity condition variables
[  67]    01D4: E4                                    is_insufficient db 4 ; if set less than 4 then the chocolate id is insufficient
[  68]        :                                       coins_for_dairy_milk equ 4
[  69]        :                                       coins_for_five_star equ 2
[  70]        :                                       coins_for_perk equ 1
[  71]    01D5: 14                                    num_of_chocs db 0
[  72]    01D6: 24                                    num_of_dairy_milk_left db 30
[  73]    01D7: 70                                    num_of_five_star_left db 30
[  74]    01D8: 3C                                    num_of_perk_left db 30
[  75]        :                                       
[  76]        :                                       ;stepper motor rotation sequence variables
[  77]        :                                       stepper_motor_sequence1 equ 00000100b			;motor sequence with pb2=1
[  78]        :                                       stepper_motor_sequence2 equ 00001000b			;motor sequence with pb3=1
[  79]        :                                       stepper_motor_sequence3 equ 00010000b			;motor sequence with pb4=1
[  80]        :                                       stepper_motor_sequence4 equ 00100000b			;motor sequence with pb5=1
[  81]        :                                       
[  82]        :                                       
[  83]    01D9:                                       .code
[  84]    01D9:                                       .startup
[  85]        :                                       		; intialize ds, es,ss to start of ram
[  86]    01D9: 70 74 F8                              mov       ax,0200h
[  87]    01DC: E8 C4                                 mov       ds,ax
[  88]    01DE: FF B0                                 mov       es,ax
[  89]    01E0: 70 E6                                 mov       ss,ax
[  90]    01E2: 14 E4 14                              mov       sp,0fffeh
[  91]    01E5: 24 70 3C                              mov       si,0000
[  92]        :                                       		
[  93]        :                                       		
[  94]    01E8: 70 74                                 		mov al,00010111b
[  95]    01EA: E9 E8                                 		out 1eh,al             ;initialising 8253 to generate clock for adc
[  96]    01EC: B5 FF                                 		mov al,05h
[  97]    01EE: 3A 06                                 		out 18h,al
[  98]    01F0:                                       		main1:
[  99]        :                                       
[ 100]        :                                       
[ 101]    01F0: 00 00 75                              			call glow_nothing
[ 102]        :                                       			
[ 103]        :                                       			
[ 104]        :                                       			;get the key pressed in the variable keypressed
[ 105]    01F3: 07 C6 06                              			call get_key_pressed
[ 106]        :                                       			
[ 107]    01F6: 03 00 01 EB 1A                        			cmp keypressed,keyid_dairy_milk
[ 108]    01FB: 3A 06                                 			jnz x1
[ 109]    01FD: 01 00                                 			jmp x3
[ 110]    01FF:                                       			x1:
[ 111]    01FF: 75 07 C6 06 03                        				cmp keypressed,keyid_five_star
[ 112]    0204: 00 02                                 				jnz x2
[ 113]    0206: EB 0D                                 				jmp x3
[ 114]    0208:                                       			x2:
[ 115]    0208: 3A 06 02 00 75                        				cmp keypressed,keyid_perk
[ 116]    020D: 07 C6                                 				jnz x3
[ 117]        :                                       				
[ 118]    020F:                                       			x3:
[ 119]    020F: 06 03 00                              				call restore_ports
[ 120]    0212: 03 EB 00                              				call glow_nothing
[ 121]        :                                       			
[ 122]        :                                       			;start sensing pressure
[ 123]    0215: 5A 59 5B                              			call sense_input_pressure
[ 124]        :                                       			
[ 125]        :                                       			
[ 126]        :                                       			
[ 127]        :                                       			;check if the number of coins exceed or not
[ 128]    0218: 58 9D C3 9C 50                        				cmp is_valid,00h
[ 129]    021D: 53 51                                 				jz main1    ; if yes then discard and start fresh
[ 130]        :                                       				; else go to main2 where you see the key press.
[ 131]    021F:                                       		main2:
[ 132]        :                                       			;check for the validity as well as the multiplicity
[ 133]    021F: 52 B0 80                              			call validity_check_after_keypress
[ 134]        :                                       			
[ 135]        :                                       			;check if the number of coins is integral multiple or not
[ 136]    0222: E6 16 B0 00 E6                        				cmp is_valid,00h
[ 137]    0227: 10 B0                                 				jnz main3				; if yes then discard and start fresh
[ 138]    0229: 80 E6 16                              main1_before:	call glow_invalid
[ 139]    022C: B0 00 E6                              				call delay_20ms
[ 140]    022F: 12 B0                                 				jmp main1
[ 141]        :                                       				; else go to start motor to dispense the chocolates
[ 142]        :                                       			
[ 143]    0231:                                       		main3:
[ 144]        :                                       			;if the chocolates are not sufficient then go back
[ 145]    0231: 80 E6 16 B0 00                        				cmp is_insufficient,4
[ 146]    0236: E6 14                                 				jge main4
[ 147]    0238: 5A 59 5B                              				call glow_insufficient
[ 148]    023B: 58 9D                                 				jmp main_end
[ 149]        :                                       				
[ 150]    023D:                                       		main4:
[ 151]    023D: C3 9C 50                              				call start_motor
[ 152]        :                                       		
[ 153]    0240:                                       		main_end:
[ 154]    0240: 53 51                                 			    jmp main1
[ 155]        :                                       			
[ 156]    0242: 52 E4 16 A2 D1                        .exit
[ 157]    0247:                                       glow_five_star proc near
[ 158]    0247: 00                                    		pushf
[ 159]    0248: E4                                    		push	ax
[ 160]    0249: 10                                    		push	bx
[ 161]    024A: A2                                    		push	cx
[ 162]    024B: CE                                    		push	dx
[ 163]        :                                       
[ 164]        :                                       
[ 165]        :                                       	;set pb1 to 1 and pb0 to 1
[ 166]    024C: 00 E4                                 		mov al,10011000b
[ 167]    024E: 12 A2                                 		out ctrl_addr,al
[ 168]    0250: CF 00                                 		mov al, 00000011b
[ 169]    0252: E4 14                                 		out portb,al
[ 170]    0254: A2 D0                                 		mov al,00001000b
[ 171]    0256: 00 5A                                 		out portc,al
[ 172]        :                                       		
[ 173]    0258: 59                                    		pop	dx
[ 174]    0259: 5B                                    		pop	cx
[ 175]    025A: 58                                    		pop	bx
[ 176]    025B: 9D                                    		pop	ax
[ 177]    025C: C3                                    		popf
[ 178]        :                                       		
[ 179]    025D: 9C                                    		ret
[ 180]        :                                       
[ 181]        :                                       glow_five_star endp
[ 182]        :                                       
[ 183]    025E:                                       glow_dairy_milk proc near
[ 184]    025E: 50                                    		pushf
[ 185]    025F: 53                                    		push	ax
[ 186]    0260: 51                                    		push	bx
[ 187]    0261: 52                                    		push	cx
[ 188]    0262: A0                                    		push	dx
[ 189]        :                                       
[ 190]        :                                       
[ 191]        :                                       	;set pb1 to 1 and pb0 to 0
[ 192]    0263: D1 00                                 		mov al,10011000b
[ 193]    0265: E6 16                                 		out ctrl_addr,al
[ 194]    0267: A0 CE                                 		mov al, 00000010b
[ 195]    0269: 00 E6                                 		out portb,al
[ 196]    026B: 10 A0                                 		mov al,00001000b
[ 197]    026D: CF 00                                 		out portc,al
[ 198]        :                                       		
[ 199]    026F: E6                                    		pop	dx
[ 200]    0270: 12                                    		pop	cx
[ 201]    0271: A0                                    		pop	bx
[ 202]    0272: D0                                    		pop	ax
[ 203]    0273: 00                                    		popf
[ 204]        :                                       		
[ 205]    0274: E6                                    		ret
[ 206]        :                                       
[ 207]        :                                       glow_dairy_milk endp
[ 208]        :                                       
[ 209]    0275:                                       glow_invalid proc near
[ 210]    0275: 14                                    		pushf
[ 211]    0276: 5A                                    		push	ax
[ 212]    0277: 59                                    		push	bx
[ 213]    0278: 5B                                    		push	cx
[ 214]    0279: 58                                    		push	dx
[ 215]        :                                       	
[ 216]        :                                       	
[ 217]        :                                       	;set pb1 to 0 and pb0 to 0
[ 218]    027A: 9D C3                                 		mov al,10011000b
[ 219]    027C: 9C 50                                 		out ctrl_addr,al
[ 220]    027E: 53 51                                 		mov al, 00000000b
[ 221]    0280: 52 B0                                 		out portb,al
[ 222]    0282: 98 E6                                 		mov al,00001000b
[ 223]    0284: 16 B0                                 		out portc,al
[ 224]        :                                       		
[ 225]    0286: 00                                    		pop	dx
[ 226]    0287: E6                                    		pop	cx
[ 227]    0288: 14                                    		pop	bx
[ 228]    0289: E8                                    		pop	ax
[ 229]    028A: 17                                    		popf
[ 230]        :                                       		
[ 231]    028B: FF                                    		ret
[ 232]        :                                       
[ 233]        :                                       glow_invalid endp
[ 234]        :                                       
[ 235]    028C:                                       glow_perk proc near
[ 236]    028C: B0                                    		pushf
[ 237]    028D: 98                                    		push	ax
[ 238]    028E: E6                                    		push	bx
[ 239]    028F: 16                                    		push	cx
[ 240]    0290: B0                                    		push	dx
[ 241]        :                                       
[ 242]        :                                       	;set pb1 to 0 and pb0 to 1
[ 243]    0291: 02 E6                                 		mov al,10011000b
[ 244]    0293: 14 E8                                 		out ctrl_addr,al
[ 245]    0295: 0C FF                                 		mov al, 00000001b
[ 246]    0297: B0 98                                 		out portb,al
[ 247]    0299: E6 16                                 		mov al,00001000b
[ 248]    029B: B0 00                                 		out portc,al
[ 249]        :                                       
[ 250]    029D: E6                                    		pop	dx
[ 251]    029E: 12                                    		pop	cx
[ 252]    029F: B0                                    		pop	bx
[ 253]    02A0: 98                                    		pop	ax
[ 254]    02A1: E6                                    		popf
[ 255]        :                                       		
[ 256]    02A2: 16                                    		ret
[ 257]        :                                       
[ 258]        :                                       glow_perk endp
[ 259]        :                                       
[ 260]    02A3:                                       delay_20ms	proc	near
[ 261]    02A3: E4                                    		pushf
[ 262]    02A4: 14                                    		push	ax
[ 263]    02A5: 8A                                    		push	bx
[ 264]    02A6: D8                                    		push	cx
[ 265]    02A7: 80                                    		push	dx
[ 266]        :                                       		
[ 267]    02A8: E3 80 80                              		mov	cx, delay20mscount						; machine cycles count for 20ms
[ 268]    02AB: FB                                    x_delayloop:	nop
[ 269]    02AC: 00                                    		nop
[ 270]    02AD: 74                                    		nop
[ 271]    02AE: 02                                    		nop
[ 272]    02AF: EB                                    		nop
[ 273]    02B0: EE B0                                 		loop	x_delayloop
[ 274]        :                                       		
[ 275]    02B2: 98                                    		pop	dx
[ 276]    02B3: E6                                    		pop	cx
[ 277]    02B4: 16                                    		pop	bx
[ 278]    02B5: E4                                    		pop	ax
[ 279]    02B6: 10                                    		popf
[ 280]        :                                       		
[ 281]    02B7: B0                                    		ret
[ 282]        :                                       delay_20ms	endp
[ 283]        :                                       
[ 284]    02B8:                                       get_key_pressed proc near
[ 285]        :                                       		
[ 286]    02B8: 98                                    		pushf
[ 287]    02B9: E6                                    		push	ax
[ 288]    02BA: 16                                    		push	bx
[ 289]    02BB: E4                                    		push	cx
[ 290]    02BC: 10                                    		push	dx
[ 291]        :                                       		
[ 292]        :                                       		;setting 8255 pc lower(0-3) as output and pc upper(4-7) is input
[ 293]    02BD: 3C 1C                                 		mov al,10011000b
[ 294]    02BF: 7D 14                                 		out ctrl_addr,al
[ 295]        :                                       		;check for key release
[ 296]    02C1:                                       		xxx0:
[ 297]    02C1: 3C 00                                 				mov al,01110000b
[ 298]    02C3: 74 1C                                 				out portc,al
[ 299]        :                                       		; checking if all keys are released
[ 300]    02C5: C6 06                                 		xxx1:	in  al,portc
[ 301]    02C7: CC 00                                 				and al,70h
[ 302]    02C9: 01 8A                                 				cmp al,70h
[ 303]    02CB: D8 80                                 				jnz xxx1		
[ 304]    02CD: EB 0D 88                              				call delay_20ms
[ 305]        :                                       					
[ 306]    02D0: 1E CD                                 				mov al,01110000b
[ 307]    02D2: 00 EB                                 				out portc,al
[ 308]        :                                       		; checking for key pressed
[ 309]    02D4: 16 C6                                 		xxx2:		in al,portc
[ 310]    02D6: 06 CC                                 					and al,70h
[ 311]    02D8: 00 00                                 					cmp al,70h
[ 312]    02DA: C6 06                                 					jz xxx2		
[ 313]    02DC: CD 00 00                              					call delay_20ms
[ 314]        :                                       					; decoding key pressed
[ 315]    02DF: EB 0A                                 					mov al,01110000b
[ 316]    02E1: C6 06                                 					out portc,al
[ 317]    02E3: CC 00                                 					in al,portc
[ 318]    02E5: 00 C6                                 					and al,70h
[ 319]    02E7: 06 CD                                 					cmp al,70h		
[ 320]    02E9: 00 00                                 					jz xxx2
[ 321]    02EB: 5A 59 5B                              					call delay_20ms
[ 322]        :                                       		
[ 323]    02EE:                                       		xxx3:
[ 324]    02EE: 58 9D C3 9C                           					cmp al,keypad_table[0]
[ 325]    02F2: 50 53                                 					jnz xxx4
[ 326]    02F4: 51 52 80 3E 03                        					mov keypressed,keyid_dairy_milk
[ 327]    02F9: 00 01                                 					jmp get_key_pressed_end
[ 328]    02FB:                                       		xxx4:
[ 329]    02FB: 75 40 B1 04                           					cmp al,keypad_table[1]
[ 330]    02FF: A0 CD                                 					jnz xxx5
[ 331]    0301: 00 B5 00 A0 CD                        					mov keypressed,keyid_five_star
[ 332]    0306: 00 B4                                 					jmp get_key_pressed_end
[ 333]    0308:                                       		xxx5:
[ 334]    0308: 00 F6 F1 80                           					cmp al,keypad_table[2]
[ 335]    030C: FC 00                                 					jnz get_key_pressed_end
[ 336]    030E: 74 08 C6 06 CC                        					mov keypressed,keyid_perk
[ 337]    0313: 00 00                                 					jmp get_key_pressed_end
[ 338]    0315:                                       		get_key_pressed_end:
[ 339]    0315: E9                                    		pop	dx
[ 340]    0316: D5                                    		pop	cx
[ 341]    0317: 00                                    		pop	bx
[ 342]    0318: C6                                    		pop	ax
[ 343]    0319: 06                                    		popf
[ 344]    031A: CC                                    		ret
[ 345]        :                                       get_key_pressed endp
[ 346]        :                                       
[ 347]    031B:                                       restore_ports proc near
[ 348]        :                                       
[ 349]    031B: 00                                    		pushf
[ 350]    031C: 01                                    		push	ax
[ 351]    031D: A2                                    		push	bx
[ 352]    031E: D3                                    		push	cx
[ 353]    031F: 00                                    		push	dx
[ 354]        :                                       
[ 355]    0320: 28 06                                 		mov al,80h
[ 356]    0322: D4 00                                 		out ctrl_addr,al
[ 357]        :                                       		
[ 358]    0324: 80 3E                                 		mov al,00h
[ 359]    0326: D4 00                                 		out porta,al
[ 360]        :                                       		
[ 361]        :                                       		
[ 362]    0328: 00 7C                                 		mov al,80h
[ 363]    032A: 03 E9                                 		out ctrl_addr,al
[ 364]    032C: BF 00                                 		mov al,00000000b
[ 365]    032E: E8 2D                                 		out portb,al
[ 366]        :                                       		
[ 367]        :                                       		
[ 368]    0330: FE C6                                 		mov al,80h
[ 369]    0332: 06 D2                                 		out ctrl_addr,al
[ 370]    0334: 00 01                                 		mov al,00000000b
[ 371]    0336: 00 06                                 		out portc,al
[ 372]        :                                       		
[ 373]    0338: D4                                    		pop	dx
[ 374]    0339: 00                                    		pop	cx
[ 375]    033A: E9                                    		pop	bx
[ 376]    033B: B0                                    		pop	ax
[ 377]    033C: 00                                    		popf
[ 378]        :                                       		
[ 379]    033D: 80                                    		ret
[ 380]        :                                       restore_ports endp
[ 381]        :                                       
[ 382]        :                                       ;call this procedure before any procedure or inside any procedure that has a possibility of changing the state of ports.
[ 383]    033E:                                       store_state_of_ports proc near
[ 384]    033E: 3E                                    		pushf
[ 385]    033F: 03                                    		push	ax
[ 386]    0340: 00                                    		push	bx
[ 387]    0341: 02                                    		push	cx
[ 388]    0342: 75                                    		push	dx
[ 389]        :                                       
[ 390]    0343: 3F B1                                 		in al,ctrl_addr
[ 391]    0345: 02 A0 CD                              		mov state_control_register,al
[ 392]    0348: 00 A0                                 		in al,porta
[ 393]    034A: CD 00 B5                              		mov state_porta,al
[ 394]    034D: 00 A0                                 		in al,portb
[ 395]    034F: CD 00 B4                              		mov state_portb,al
[ 396]    0352: 00 F6                                 		in al,portc
[ 397]    0354: F1 80 FC                              		mov state_portc,al
[ 398]        :                                       
[ 399]    0357: 00                                    		pop	dx
[ 400]    0358: 74                                    		pop	cx
[ 401]    0359: 08                                    		pop	bx
[ 402]    035A: C6                                    		pop	ax
[ 403]    035B: 06                                    		popf
[ 404]        :                                       		
[ 405]    035C: CC                                    		ret	
[ 406]        :                                       store_state_of_ports endp
[ 407]        :                                       
[ 408]        :                                       ;call this procedure after any procedure that has a possibility of changing the state of ports.
[ 409]    035D:                                       revert_state_of_ports proc near
[ 410]    035D: 00                                    		pushf
[ 411]    035E: 00                                    		push	ax
[ 412]    035F: E9                                    		push	bx
[ 413]    0360: 8B                                    		push	cx
[ 414]    0361: 00                                    		push	dx
[ 415]        :                                       
[ 416]    0362: C6 06 CC                              		mov al,state_control_register
[ 417]    0365: 00 01                                 		out ctrl_addr,al
[ 418]    0367: A2 D3 00                              		mov al,state_porta
[ 419]    036A: 28 06                                 		out porta,al
[ 420]    036C: D5 00 80                              		mov al,state_portb
[ 421]    036F: 3E D5                                 		out portb,al
[ 422]    0371: 00 00 7D                              		mov al,state_portc
[ 423]    0374: 78 E8                                 		out portc,al
[ 424]        :                                       
[ 425]    0376: CF                                    		pop	dx
[ 426]    0377: FD                                    		pop	cx
[ 427]    0378: C6                                    		pop	bx
[ 428]    0379: 06                                    		pop	ax
[ 429]    037A: D2                                    		popf
[ 430]        :                                       		
[ 431]    037B: 00                                    		ret		
[ 432]        :                                       revert_state_of_ports endp
[ 433]        :                                       
[ 434]    037C:                                       sense_input_pressure proc near
[ 435]    037C: 02                                    			pushf
[ 436]    037D: 00                                    			push	ax
[ 437]    037E: 06                                    			push	bx
[ 438]    037F: D5                                    			push	cx
[ 439]    0380: 00                                    			push	dx
[ 440]        :                                       			
[ 441]        :                                       
[ 442]        :                                       			
[ 443]        :                                       						;send start of conversion signal to adc along with address of analog input channel to activate
[ 444]    0381: EB 6A                                 								mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 445]    0383: C6 06                                 								out ctrl_addr,al
[ 446]        :                                       								;making it low to high
[ 447]        :                                       								
[ 448]    0385: CC 00                                 								mov al,00000000b		;setting pc1(soc) to 0,pc0 to 0
[ 449]    0387: 00 80                                 								out portc,al
[ 450]    0389: 3E 03 00                              								call delay_20ms
[ 451]        :                                       								
[ 452]    038C: 03 75                                 								mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 453]    038E: 5E B1                                 								out ctrl_addr,al
[ 454]    0390: 01 A0                                 								mov al,00000010b		;setting pc1(soc) to 1,pc0 to 0
[ 455]    0392: CD 00                                 								out portc,al
[ 456]        :                                       								
[ 457]    0394: A0 CD 00                              								call delay_20ms
[ 458]        :                                       								
[ 459]    0397: B5 00                                 								mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 460]    0399: A0 CD                                 								out ctrl_addr,al
[ 461]    039B: 00 B4                                 								mov al,00h				;setting pb6,pb7 to 0,0
[ 462]    039D: 00 F6                                 								out portb,al
[ 463]        :                                       						;giving conversion time to adc
[ 464]        :                                       						;right now giving a longer delay(20ms) rather than only conversion time of adc(100us)
[ 465]        :                                       						;check for end of conversion signal from adc
[ 466]        :                                       								
[ 467]        :                                       								
[ 468]    039F:                                       eoc_check:						
[ 469]    039F: F1 80                                 								mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 470]    03A1: FC 00                                 								out ctrl_addr,al
[ 471]    03A3: 74 07                                 								in al,portc
[ 472]    03A5: C6 06                                 								mov bl,al
[ 473]    03A7: CC 00 00                              								and bl,10000000b
[ 474]    03AA: EB 41 C6                              								cmp bl,00h
[ 475]    03AD: 06 CC                                 								jz eoc_done
[ 476]    03AF: 00 01                                 								jmp eoc_check
[ 477]        :                                       								
[ 478]        :                                       						;conversion complete move to taking input from adc
[ 479]    03B1: A2 D3                                 eoc_done:						mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 480]    03B3: 00 28                                 								out ctrl_addr,al
[ 481]    03B5: 06 D6                                 								in al,porta				;taking d0-d7 from adc into porta and then into al for further processing.
[ 482]        :                                       						
[ 483]        :                                       						;to check validity of input by examining d0-d7 sequence
[ 484]    03B7: 00 80                                 						mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 485]    03B9: 3E D6                                 						out ctrl_addr,al
[ 486]    03BB: 00 00                                 						in al,porta				;taking d0-d7 from adc into porta and then into al for further processing.
[ 487]        :                                       
[ 488]        :                                       						
[ 489]    03BD: 7D 2E                                 						cmp al,pressure_limit_plus_offset
[ 490]    03BF: E8 CA                                 						jge pressure_limit_exceed
[ 491]    03C1: FD C6                                 						cmp al,00h
[ 492]    03C3: 06 D2                                 						je pressure_limit_fall_short
[ 493]    03C5: 00 03 00 06 D6                        						mov is_valid,01h
[ 494]    03CA: 00 EB                                 						mov bl,al
[ 495]    03CC: 20 C6 06                              						sub bl,pressure_offset
[ 496]    03CF: CC 00 01 B5                           						mov no_of_coins,bl
[ 497]    03D3: 00 A0                                 						jmp pressure_finish
[ 498]    03D5: CD 00 B4 00 F6                        pressure_limit_exceed:	mov is_valid,00h
[ 499]    03DA: F1 80 FC 00 74                        						mov no_of_coins,00h
[ 500]    03DF: 05 C6                                 						jmp pressure_finish
[ 501]    03E1: 06 CC 00 00 C6                        pressure_limit_fall_short: mov is_valid,00h
[ 502]    03E6: 06 CC 00 01 A2                        						mov no_of_coins,00h
[ 503]    03EB:                                       pressure_finish:
[ 504]        :                                       	
[ 505]    03EB: D3                                    		pop	dx
[ 506]    03EC: 00                                    		pop	cx
[ 507]    03ED: 5A                                    		pop	bx
[ 508]    03EE: 59                                    		pop	ax
[ 509]    03EF: 5B                                    		popf
[ 510]        :                                       		
[ 511]    03F0: 58                                    		ret		
[ 512]        :                                       sense_input_pressure endp
[ 513]        :                                       
[ 514]    03F1:                                       validity_check_after_keypress proc near
[ 515]    03F1: 9D                                    		pushf
[ 516]    03F2: C3                                    		push	ax
[ 517]    03F3: 9C                                    		push	bx
[ 518]    03F4: 50                                    		push	cx
[ 519]    03F5: 53                                    		push	dx
[ 520]        :                                       		
[ 521]        :                                       		; get number of coins for the key pressed
[ 522]    03F6:                                       		dairy_milk_pressed:
[ 523]    03F6: 51 52 8A 0E D3                        			cmp keypressed,keyid_dairy_milk
[ 524]    03FB: 00 B5                                 			jnz five_star_pressed
[ 525]    03FD: 00 E8                                 			mov cl,coins_for_dairy_milk
[ 526]    03FF: 5C 00 E8                              			mov al,no_of_coins
[ 527]    0402: 9F FD                                 			mov ch,00h
[ 528]    0404: E8 A6 00                              		    mov al,no_of_coins
[ 529]    0407: E2 F5                                 		    mov ah,00h
[ 530]        :                                       		
[ 531]        :                                       		     ;check if the number of coins is the integral multiple of the key pressed
[ 532]    0409: 5A 59                                 	      	div cl             ; al = ax/cl, ah = remainder
[ 533]        :                                       		
[ 534]        :                                       		;compare the remainder
[ 535]    040B: 5B 58 9D                              		    cmp ah,00h
[ 536]    040E: C3 9C                                 			jz set_it_valid1
[ 537]    0410: 50 53 51 52 B0                        			mov is_valid,00h
[ 538]    0415: 80 E6 16                              			jmp validity_end
[ 539]        :                                       			
[ 540]    0418:                                       			set_it_valid1:
[ 541]    0418: B0 00 E6 14 5A                        			mov is_valid,01h
[ 542]    041D: 59 5B 58                              			mov num_of_chocs,al
[ 543]    0420: 9D C3 9C 50                           			sub num_of_dairy_milk_left,al
[ 544]    0424: 53 51 52 E8 E5                        			cmp num_of_dairy_milk_left,00h
[ 545]    0429: FF 80 3E D2 00                        			jge	validity_end
[ 546]    042E: 01 75 05                              			call glow_dairy_milk
[ 547]    0431: E8 2A FD EB 18                        			mov is_insufficient,keyid_dairy_milk
[ 548]    0436: 80 3E D2 00                           			add num_of_dairy_milk_left,al
[ 549]    043A: 02 75 05                              			jmp validity_end
[ 550]        :                                       			
[ 551]        :                                       		
[ 552]    043D:                                       		five_star_pressed:
[ 553]    043D: E8 07 FD EB 0C                        			cmp keypressed,keyid_five_star
[ 554]    0442: 80 3E                                 			jnz perk_pressed
[ 555]    0444: D2 00                                 			mov cl,coins_for_five_star
[ 556]    0446: 03 75 05                              			mov al,no_of_coins
[ 557]    0449: E8 40 FD                              			mov al,no_of_coins
[ 558]    044C: EB 00                                 			mov ch,00h
[ 559]    044E: E8 52 FD                              		    mov al,no_of_coins
[ 560]    0451: E8 4F                                 		    mov ah,00h
[ 561]        :                                       		
[ 562]        :                                       		     ;check if the number of coins is the integral multiple of the key pressed
[ 563]    0453: FD E8                                 	      	div cl             ; al = ax/cl, ah = remainder
[ 564]        :                                       		
[ 565]        :                                       		;compare the remainder
[ 566]    0455: B8 FF 5A                              		    cmp ah,00h
[ 567]    0458: 59 5B                                 			jz set_it_valid2
[ 568]    045A: 58 9D C3 9C 50                        			mov is_valid,00h
[ 569]    045F: 53 51 52                              			jmp validity_end
[ 570]        :                                       			
[ 571]    0462:                                       			set_it_valid2:
[ 572]    0462: B0 98 E6 16 E4                        			mov is_valid,01h
[ 573]    0467: 14 8A D0                              			mov num_of_chocs,al
[ 574]    046A: 8A DA 80 E3                           			sub num_of_five_star_left,al
[ 575]    046E: F7 8A C3 E6 14                        			cmp num_of_five_star_left,00h
[ 576]    0473: B0 98                                 			jge	validity_end
[ 577]    0475: E6 16 B0                              			call glow_five_star
[ 578]    0478: 04 E6 12 E8 25                        			mov is_insufficient,keyid_five_star
[ 579]    047D: FD B0 98 E6                           			add num_of_five_star_left,al
[ 580]    0481: 16 B0                                 			jmp validity_end
[ 581]        :                                       		
[ 582]    0483:                                       		perk_pressed:
[ 583]    0483: 08 E6 12 E8 1A                        			mov is_valid,00h
[ 584]    0488: FD B0 98 E6 16                        			cmp keypressed,keyid_perk
[ 585]    048D: B0 10                                 			jnz validity_end
[ 586]    048F: E6 12                                 			mov cl,coins_for_perk
[ 587]    0491: E8 0F FD                              			mov al,no_of_coins
[ 588]    0494: B0 98 E6                              			mov al,no_of_coins
[ 589]    0497: 16 B0                                 			mov ch,00h
[ 590]    0499: 20 E6 12                              		    mov al,no_of_coins
[ 591]    049C: E8 04                                 		    mov ah,00h
[ 592]        :                                       		
[ 593]        :                                       		     ;check if the number of coins is the integral multiple of the key pressed
[ 594]    049E: FD B0                                 	      	div cl             ; al = ax/cl, ah = remainder
[ 595]        :                                       		
[ 596]        :                                       		;compare the remainder
[ 597]    04A0: 98 E6 16                              		    cmp ah,00h
[ 598]    04A3: 8A C2                                 			jz set_it_valid3
[ 599]    04A5: E6 14 5A 59 5B                        			mov is_valid,00h
[ 600]    04AA: 58 9D                                 			jmp validity_end
[ 601]    04AC:                                       			set_it_valid3:
[ 602]    04AC: C3 9C 50 53 51                        			mov is_valid,01h
[ 603]    04B1: 52 B0 98                              			mov num_of_chocs,al
[ 604]    04B4: E6 16 E4 14                           			sub num_of_perk_left,al
[ 605]    04B8: 8A D0 8A DA 80                        			cmp num_of_perk_left,00h
[ 606]    04BD: E3 F7                                 			jge	validity_end
[ 607]    04BF: 8A C3 E6                              			call glow_perk
[ 608]    04C2: 14 B0 98 E6 16                        			mov is_insufficient,keyid_perk
[ 609]    04C7: B0 10 E6 12                           			add num_of_perk_left,al
[ 610]    04CB: E8 D5                                 			jmp validity_end
[ 611]    04CD:                                       		after_chocolate_selected:
[ 612]    04CD: FC B0 98 E6 16                        			mov is_valid,01h
[ 613]        :                                       		
[ 614]    04D2: B0 04                                 		mov ch,00h
[ 615]    04D4: E6 12 E8                              		mov al,no_of_coins
[ 616]    04D7: CA FC                                 		mov ah,00h
[ 617]        :                                       		
[ 618]        :                                       		;check if the number of coins is the integral multiple of the key pressed
[ 619]    04D9: B0 98                                 		div cl             ; al = ax/cl, ah = remainder
[ 620]        :                                       		
[ 621]        :                                       		;compare the remainder
[ 622]    04DB: E6 16 B0                              		cmp ah,00h
[ 623]    04DE: 20 E6                                 		jz set_it_valid
[ 624]    04E0: 12 E8 BF FC B0                        		mov is_valid,00h
[ 625]        :                                       		
[ 626]    04E5:                                       		set_it_valid:
[ 627]    04E5: 98 E6 16 B0 10                        		mov is_valid,01h
[ 628]    04EA: E6 12 E8                              		mov num_of_chocs,al
[ 629]    04ED:                                       		validity_end:
[ 630]        :                                       		
[ 631]    04ED: B4                                    		pop	dx
[ 632]    04EE: FC                                    		pop	cx
[ 633]    04EF: B0                                    		pop	bx
[ 634]    04F0: 98                                    		pop	ax
[ 635]    04F1: E6                                    		popf
[ 636]        :                                       		
[ 637]    04F2: 16                                    		ret		
[ 638]        :                                       
[ 639]        :                                       validity_check_after_keypress endp
[ 640]        :                                       
[ 641]    04F3:                                       start_motor proc near
[ 642]        :                                       		
[ 643]    04F3: 8A                                    		pushf
[ 644]    04F4: C2                                    		push	ax
[ 645]    04F5: E6                                    		push	bx
[ 646]    04F6: 14                                    		push	cx
[ 647]    04F7: 5A                                    		push	dx
[ 648]        :                                       		
[ 649]        :                                       		; now dummy glow led the number of time the chocolates are ordedairy_milk
[ 650]    04F8: 59 5B 58 9D                           		mov cl,num_of_chocs
[ 651]    04FC: C3 58                                 		mov ch,00h
[ 652]        :                                       		
[ 653]    04FE:                                       		start_motor1:
[ 654]    04FE: 9D C3 E6                              			call stepper_motor_open
[ 655]    0501: 16 8A C2                              			call delay_20ms
[ 656]    0504: E6 14 5A                              			call stepper_motor_close
[ 657]    0507: 59 5B                                 			loop start_motor1
[ 658]        :                                       
[ 659]    0509:                                       motorend:
[ 660]        :                                       			
[ 661]        :                                       
[ 662]    0509: 58                                    		pop	dx
[ 663]    050A: 9D                                    		pop	cx
[ 664]    050B: C3                                    		pop	bx
[ 665]    050C: 00                                    		pop	ax
[ 666]    050D: 00                                    		popf
[ 667]        :                                       		
[ 668]    050E: 00                                    		ret		
[ 669]        :                                       start_motor endp
[ 670]        :                                       
[ 671]    050F:                                       glow_nothing proc near
[ 672]        :                                       		
[ 673]    050F: 00                                    		pushf
[ 674]    0510: 00                                    		push	ax
[ 675]    0511: 00                                    		push	bx
[ 676]    0512: 00                                    		push	cx
[ 677]    0513: 00                                    		push	dx
[ 678]        :                                       		
[ 679]    0514: 00 00                                 		mov al,80h
[ 680]    0516: 00 00                                 		out ctrl_addr,al
[ 681]    0518: 00 00                                 		mov al,00000000b
[ 682]    051A: 00 00                                 		out portc,al
[ 683]        :                                       		
[ 684]    051C: 00                                    		pop	dx
[ 685]    051D: 00                                    		pop	cx
[ 686]    051E: 00                                    		pop	bx
[ 687]    051F: 00                                    		pop	ax
[ 688]    0520: 00                                    		popf
[ 689]        :                                       		
[ 690]    0521: 00                                    		ret		
[ 691]        :                                       
[ 692]        :                                       glow_nothing endp
[ 693]        :                                       
[ 694]    0522:                                       glow_insufficient proc near
[ 695]        :                                       
[ 696]    0522: 00                                    		pushf
[ 697]    0523: 00                                    		push	ax
[ 698]    0524: 00                                    		push	bx
[ 699]    0525: 00                                    		push	cx
[ 700]    0526: 00                                    		push	dx
[ 701]        :                                       		
[ 702]    0527: 00 00 00                              		call glow_nothing
[ 703]        :                                       		
[ 704]    052A: 00 00 00 00 00                        		cmp is_insufficient,keyid_dairy_milk
[ 705]    052F: 00 00                                 		jnz glow_insufficient1
[ 706]    0531: 00 00 00                              		call glow_dairy_milk
[ 707]    0534: 00 00                                 		jmp glow_insufficient_end
[ 708]        :                                       		
[ 709]    0536:                                       		glow_insufficient1:
[ 710]    0536: 00 00 00 00 00                        		cmp is_insufficient,keyid_five_star
[ 711]    053B: 00 00                                 		jnz glow_insufficient2
[ 712]    053D: 00 00 00                              		call glow_five_star
[ 713]    0540: 00 00                                 		jmp glow_insufficient_end
[ 714]        :                                       		
[ 715]    0542:                                       		glow_insufficient2:
[ 716]    0542: 00 00 00 00 00                        		cmp is_insufficient,keyid_perk
[ 717]    0547: 00 00                                 		jnz glow_insufficient_end
[ 718]    0549: 00 00 00                              		call glow_perk
[ 719]    054C: 00 00                                 		jmp glow_insufficient_end
[ 720]        :                                       		
[ 721]    054E:                                       		glow_insufficient_end:
[ 722]    054E: 00 00 00                              		call delay_20ms
[ 723]    0551: 00 00 00                              		call delay_20ms
[ 724]    0554: 00 00 00                              		call glow_nothing
[ 725]        :                                       		
[ 726]    0557: 00                                    		pop	dx
[ 727]    0558: 00                                    		pop	cx
[ 728]    0559: 00                                    		pop	bx
[ 729]    055A: 00                                    		pop	ax
[ 730]    055B: 00                                    		popf
[ 731]        :                                       		
[ 732]    055C: 00                                    		ret	
[ 733]        :                                       glow_insufficient endp
[ 734]        :                                       
[ 735]    055D:                                       stepper_motor_open proc near
[ 736]        :                                       ;give the sequence to stepper motor such that at a time one input is 1,others are 0.
[ 737]        :                                       ;clockwise rotation is taken as opening of motor slot.
[ 738]        :                                       
[ 739]    055D: 00                                    		pushf
[ 740]    055E: 00                                    		push	ax
[ 741]    055F: 00                                    		push	bx
[ 742]    0560: 00                                    		push	cx
[ 743]    0561: 00                                    		push	dx
[ 744]        :                                       
[ 745]    0562: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 746]    0564: 00 00                                 		out ctrl_addr,al
[ 747]        :                                       		;to disable the decoder putting pc3=0
[ 748]    0566: 00 00                                 		in al,portc
[ 749]    0568: 00 00                                 		mov dl,al
[ 750]    056A: 00 00                                 		mov bl,dl
[ 751]    056C: 00 00 00                              		and bl,11110111b
[ 752]    056F: 00 00                                 		mov al,bl
[ 753]    0571: 00 00                                 		out portc,al
[ 754]    0573: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 755]    0575: 00 00                                 		out ctrl_addr,al
[ 756]    0577: 00 00                                 		mov al,stepper_motor_sequence1
[ 757]    0579: 00 00                                 		out portb,al
[ 758]    057B: 00 00 00                              		call delay_20ms
[ 759]        :                                       		
[ 760]    057E: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 761]    0580: 00 00                                 		out ctrl_addr,al
[ 762]    0582: 00 00                                 		mov al,stepper_motor_sequence2
[ 763]    0584: 00 00                                 		out portb,al
[ 764]    0586: 00 00 00                              		call delay_20ms
[ 765]    0589: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 766]    058B: 00 00                                 		out ctrl_addr,al
[ 767]    058D: 00 00                                 		mov al,stepper_motor_sequence3
[ 768]    058F: 00 00                                 		out portb,al
[ 769]    0591: 00 00 00                              		call delay_20ms
[ 770]    0594: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 771]    0596: 00 00                                 		out ctrl_addr,al
[ 772]    0598: 00 00                                 		mov al,stepper_motor_sequence4
[ 773]    059A: 00 00                                 		out portb,al
[ 774]    059C: 00 00 00                              		call delay_20ms
[ 775]    059F: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 776]    05A1: 00 00                                 		out ctrl_addr,al
[ 777]    05A3: 00 00                                 		mov al,dl
[ 778]    05A5: 00 00                                 		out portc,al
[ 779]        :                                       		
[ 780]    05A7: 00                                    		pop	dx
[ 781]    05A8: 00                                    		pop	cx
[ 782]    05A9: 00                                    		pop	bx
[ 783]    05AA: 00                                    		pop	ax
[ 784]    05AB: 00                                    		popf
[ 785]        :                                       		
[ 786]    05AC: 00                                    		ret
[ 787]        :                                       
[ 788]        :                                       stepper_motor_open endp
[ 789]        :                                       
[ 790]    05AD:                                       stepper_motor_close proc near
[ 791]        :                                       ;give the sequence to stepper motor such that at a time one input is 1,others are 0.
[ 792]        :                                       ;anti-clockwise rotation is taken as closing of motor slot.
[ 793]        :                                       
[ 794]    05AD: 00                                    		pushf
[ 795]    05AE: 00                                    		push	ax
[ 796]    05AF: 00                                    		push	bx
[ 797]    05B0: 00                                    		push	cx
[ 798]    05B1: 00                                    		push	dx
[ 799]        :                                       
[ 800]    05B2: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 801]    05B4: 00 00                                 		out ctrl_addr,al
[ 802]        :                                       		;to disable the decoder putting pc3=0
[ 803]    05B6: 00 00                                 		in al,portc
[ 804]    05B8: 00 00                                 		mov dl,al
[ 805]    05BA: 00 00                                 		mov bl,dl
[ 806]    05BC: 00 00 00                              		and bl,11110111b
[ 807]    05BF: 00 00                                 		mov al,bl
[ 808]    05C1: 00 00                                 		out portc,al
[ 809]    05C3: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 810]    05C5: 00 00                                 		out ctrl_addr,al
[ 811]    05C7: 00 00                                 		mov al,stepper_motor_sequence3
[ 812]    05C9: 00 00                                 		out portb,al
[ 813]    05CB: 00 00 00                              		call delay_20ms
[ 814]    05CE: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 815]    05D0: 00 00                                 		out ctrl_addr,al
[ 816]    05D2: 00 00                                 		mov al,stepper_motor_sequence1
[ 817]    05D4: 00 00                                 		out portb,al
[ 818]    05D6: 00 00 00                              		call delay_20ms
[ 819]    05D9: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 820]    05DB: 00 00                                 		out ctrl_addr,al
[ 821]    05DD: 00 00                                 		mov al,stepper_motor_sequence4
[ 822]    05DF: 00 00                                 		out portb,al
[ 823]    05E1: 00 00 00                              		call delay_20ms
[ 824]    05E4: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 825]    05E6: 00 00                                 		out ctrl_addr,al
[ 826]    05E8: 00 00                                 		mov al,stepper_motor_sequence3
[ 827]    05EA: 00 00                                 		out portb,al
[ 828]    05EC: 00 00 00                              		call delay_20ms
[ 829]        :                                       		
[ 830]        :                                       		;restore state of portc
[ 831]    05EF: 00 00                                 		mov al,10011000b  		;setting portc upper(4-7) as input and portc lower(0-3) as output,porta as input,portb as output
[ 832]    05F1: 00 00                                 		out ctrl_addr,al
[ 833]    05F3: 00 00                                 		mov al,dl
[ 834]    05F5: 00 00                                 		out portc,al
[ 835]        :                                       		
[ 836]    05F7: 00                                    		pop	dx
[ 837]    05F8: 00                                    		pop	cx
[ 838]    05F9: 00                                    		pop	bx
[ 839]    05FA: 00                                    		pop	ax
[ 840]    05FB: 00                                    		popf
[ 841]        :                                       		
[ 842]    05FC: 00                                    		ret
[ 843]        :                                       
[ 844]        :                                       stepper_motor_close endp
[ 845]        :                                       
[ 846]        :                                       end
[ 847]        :                                       
 
===================================================================================================
 




===================================================================================================
